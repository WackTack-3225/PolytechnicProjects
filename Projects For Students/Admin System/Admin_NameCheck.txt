// Global variable to store the People API scope
var PEOPLE_API_SCOPE = 'https://www.googleapis.com/auth/contacts';

// Function to handle the OAuth2 authorization flow
function getOAuthService() {
  return OAuth2.createService('PeopleAPI')
    .setAuthorizationBaseUrl('https://accounts.google.com/o/oauth2/auth')
    .setTokenUrl('https://accounts.google.com/o/oauth2/token')
    .setClientId('*****') // Replace with your client ID
    .setClientSecret('*****') // Replace with your client secret
    .setCallbackFunction('authCallback')
    .setPropertyStore(PropertiesService.getUserProperties())
    .setScope(PEOPLE_API_SCOPE);
}

// OAuth2 callback function
function authCallback(request) {
  var service = getOAuthService();
  var authorized = service.handleCallback(request);
  if (authorized) {
    return HtmlService.createHtmlOutput('Success! You can close this tab.');
  } else {
    return HtmlService.createHtmlOutput('Denied. You can close this tab');
  }
}

// Function to reset OAuth2 token (for debugging)
function resetOAuth() {
  var service = getOAuthService();
  service.reset();
}

// AUTO ADDER
function addStudentsToContacts() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var inputSheet = ss.getSheetByName("Input");

  var inputData = inputSheet.getRange(2, 3, inputSheet.getLastRow() - 1).getValues(); // Starts from row 2

  var service = getOAuthService();
  if (service.hasAccess()) {
    for (var i = 0; i < inputData.length; i++) {
      var studentName = inputSheet.getRange(i + 2, 2).getValue(); // COL B
      var studyStage = inputSheet.getRange(i + 2, 6).getValue(); // COL F
      var studentPhone = inputSheet.getRange(i + 2, 7).getValue(); // COL G
      addStudentToContactsAPI(studentName, studentPhone, studyStage, service);
    }

    SpreadsheetApp.getUi().alert("Students have been added to Google Contacts.");
  } else {
    var authorizationUrl = service.getAuthorizationUrl();
    var template = HtmlService.createTemplate(
      '<a href="<?= authorizationUrl ?>" target="_blank">Authorize Google Contacts</a>'
    );
    template.authorizationUrl = authorizationUrl;
    var page = template.evaluate();
    SpreadsheetApp.getUi().showModalDialog(page, 'Authorize');
  }
}

// Function to add a contact using the People API
function addStudentToContactsAPI(name, phone, studyStage, service) {
  // Ensure the phone number is a string and format it to E.164 standard
  phone = phone.toString().trim();

  if (!phone.startsWith('+')) {
    phone = '+65' + phone; // Append country code
  }
  
  // Prepend the study stage to the name
  var fullName = name + " (" + "Y" + studyStage + ")"; 

  var url = 'https://people.googleapis.com/v1/people:createContact';
  var payload = {
    "names": [
      {
        "givenName": fullName
      }
    ],
    "phoneNumbers": [
      {
        "value": phone
      }
    ]
  };

  var response = UrlFetchApp.fetch(url, {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify(payload),
    headers: {
      Authorization: 'Bearer ' + service.getAccessToken()
    }
  });

  Logger.log(response.getContentText());
}

// START OF DELETER SECTION

function checkAndDeleteStudents() {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var historicalSheet = ss.getSheetByName("Database");
  var inputSheet = ss.getSheetByName("Input");

  // Get data starting from the second row to avoid the header
  var historicalData = historicalSheet.getRange(1, 3, historicalSheet.getLastRow()).getValues();
  var inputData = inputSheet.getRange(2, 3, inputSheet.getLastRow() - 1).getValues(); // Starts from row 2

  // Convert the historical data to a flat array for easier searching
  var historicalList = historicalData.map(function(row) { return row[0]; });
  var rowsDeleted = 0; // Initialize a counter for the rows deleted

  // Iterate over input data from the bottom to the top, starting from row 2
  for (var i = inputData.length - 1; i >= 0; i--) {
    var adminNumber = inputData[i][0];
    if (historicalList.indexOf(adminNumber) > -1) {
      // Delete the entire row if the admin number exists in the historical list
      // Since inputData starts from row 2, add 1 to align with actual sheet rows
      inputSheet.deleteRow(i + 2); // Adjusted to account for starting from the second row
      rowsDeleted++; // Increment the counter each time a row is deleted
    }
  }

  // Log the number of rows deleted to the Logger
  Logger.log("Rows Deleted: " + rowsDeleted);

  // Optionally, you can display a message box in the spreadsheet with the count
  SpreadsheetApp.getUi().alert("Rows Deleted: " + rowsDeleted);
}

// UI SECTION 

function onOpen() {
  var ui = SpreadsheetApp.getUi();
  ui.createMenu('Student Management')
      .addItem('Delete Existing Students', 'checkAndDeleteStudents')
      .addItem('Add Students to Contacts', 'addStudentsToContacts')
      .addToUi();
}